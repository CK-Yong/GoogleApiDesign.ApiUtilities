name: build-and-test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ] 

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v1.6.0
      
    - name: Build Docker Image
      uses: docker/build-push-action@v2.9.0
      with:
        file: .github/workflows/build.Dockerfile
        target: dotnet-build
        tags: gaip-net/build:latest
    
    - name: Run tests
      uses: docker/build-push-action@v2.9.0
      with:
        file: .github/workflows/build.Dockerfile
        target: dotnet-test
        tags: test-results:latest
        load: true
        
    - name: Copy test results
      run: |
        id=$(docker create test-results)
        docker cp $id:/work/testresults ${{ github.workspace }}/testresults
      
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: ${{ github.workspace }}/testresults
      if: ${{ always() }}
      
    # Build and push packages           
    - name: Install Git Version
      uses: GitTools/actions@v0.9
      with:
        versionSpec: '6.x'
    
    - name: Checkout for version calculation
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Determine Version
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9
    
    - run: |
        echo ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}
    
    - uses: docker/build-push-action@v2.9.0
      id: package
      name: Prepare packages
      if: github.event_name != 'pull_request'
      with:
        file: .github/workflows/build.Dockerfile
        tags: gaip-net/packages:latest
        target: dotnet-pack
        build-args: Version=${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }} 
        load: true
      
    - name: Push to Nuget
      if: steps.package.outcome == 'success'
      run : |
        docker run --name pack gaip-net/packages:latest dotnet nuget push /output/*.nupkg -k ${{ secrets.NUGET_PAT }} -s https://api.nuget.org/v3/index.json
        
    - name: Copy nupkg files
      id: copy-nupkgs
      if: steps.package.outcome == 'success'
      run : |
        docker cp pack:/output ${{ github.workspace }}/nupkgs
        
    - name: Upload nupkg files
      if: steps.copy-nupkgs.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: nuget-packages
        path: ${{ github.workspace }}/nupkgs
      
